What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, the system creates a .git file within
the directory. You need to do this in order to use version control with
the files.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area acts as a buffer, or intermediate, between the working
directory and the repository. When you want to add files from the work-
ing directory to the repository, you first add them to the staging area.
The staging area is valuable because if you wish to rescind an addition,
you can do so without messing up your repository with weird changes.

How can you use the staging area to make sure you have one commit per
logical change?

I can use the git diff --staged command to compare the staging area with
the most recent commit to ensure that I have made a logical change. If
not, I can use git reset to remove the changed file from the staging
are and change the file in the working directory.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

One situation in which branching would be useful is if I made a version
of your project in another language. Branches would help because I would
be able to reserve the main version of the project. A second situation
that I could use branches would be in creating an easy version of a game.
Again, the more difficult version of the game would not be disturbed,
and both versions would exist concurrently.

How do the diagrams help you visualize the branch structure?

The diagrams let me see the commits included within each branch and
let me view the possible reachability of one commit from another. This
way, I can study the overall interaction of all the branches and add to
the project accordingly.
